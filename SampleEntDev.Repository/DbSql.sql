DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM pg_namespace WHERE nspname = 'ecommerce') THEN
        CREATE SCHEMA ecommerce;
    END IF;
END $EF$;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM pg_namespace WHERE nspname = 'management') THEN
        CREATE SCHEMA management;
    END IF;
END $EF$;


DO $EF$
BEGIN
    IF NOT EXISTS(SELECT 1 FROM pg_namespace WHERE nspname = 'global') THEN
        CREATE SCHEMA global;
    END IF;
END $EF$;


CREATE SEQUENCE management.functions_id_seq START WITH 1 INCREMENT BY 1 NO MINVALUE MAXVALUE 2147483647 NO CYCLE;


CREATE SEQUENCE management."UserToRoles_id_seq" START WITH 1 INCREMENT BY 1 NO MINVALUE MAXVALUE 2147483647 NO CYCLE;


CREATE TABLE ecommerce.category (
    id integer GENERATED BY DEFAULT AS IDENTITY,
    created_date timestamp without time zone NULL DEFAULT (CURRENT_TIMESTAMP),
    updated_date timestamp without time zone NULL,
    name text NULL,
    description text NULL,
    is_deleted boolean NULL DEFAULT (false),
    last_modifier character varying NULL,
    CONSTRAINT "PK_category" PRIMARY KEY (id)
);


CREATE TABLE management.functions (
    id integer GENERATED BY DEFAULT AS IDENTITY,
    created_date timestamp without time zone NULL DEFAULT (CURRENT_TIMESTAMP),
    updated_date timestamp without time zone NULL,
    function_name character varying NOT NULL,
    area_name character varying NULL,
    controller_name character varying NOT NULL,
    action_name character varying NOT NULL,
    is_deleted boolean NULL DEFAULT (false),
    last_modifier character varying NULL,
    CONSTRAINT "PK_functions" PRIMARY KEY (id)
);


CREATE TABLE global.institution (
    id integer NOT NULL DEFAULT (nextval('global."Institution_id_seq"'::regclass)),
    created_date timestamp without time zone NULL DEFAULT (CURRENT_TIMESTAMP),
    updated_date timestamp without time zone NULL,
    name character varying NOT NULL,
    address character varying NULL,
    phone character varying NULL,
    city_id integer NOT NULL,
    county_id integer NULL,
    neighborhood_id integer NULL,
    is_deleted boolean NULL DEFAULT (false),
    last_modifier character varying NULL,
    CONSTRAINT "PK_institution" PRIMARY KEY (id)
);


CREATE TABLE management.roles (
    id integer NOT NULL DEFAULT (nextval('management."Roles_id_seq"'::regclass)),
    created_date timestamp without time zone NULL DEFAULT (CURRENT_TIMESTAMP),
    updated_date timestamp without time zone NULL,
    role_name character varying NOT NULL,
    is_deleted boolean NULL DEFAULT (false),
    last_modifier character varying NULL,
    CONSTRAINT "PK_roles" PRIMARY KEY (id)
);


CREATE TABLE ecommerce.test (
    id integer GENERATED BY DEFAULT AS IDENTITY,
    created_date timestamp without time zone NULL DEFAULT (CURRENT_TIMESTAMP),
    updated_date timestamp without time zone NULL,
    ad character varying NULL,
    soyad character varying NULL,
    is_deleted boolean NULL DEFAULT (false),
    last_modifier character varying NULL,
    CONSTRAINT "PK_test" PRIMARY KEY (id)
);


CREATE TABLE management.users (
    id integer NOT NULL DEFAULT (nextval('management."User_id_seq"'::regclass)),
    created_date timestamp without time zone NULL DEFAULT (CURRENT_TIMESTAMP),
    updated_date timestamp without time zone NULL,
    identity_number bigint NULL,
    name character varying NOT NULL,
    surename character varying NOT NULL,
    e_mail character varying NOT NULL,
    password character varying NOT NULL,
    last_login_datetime timestamp without time zone NULL,
    record_status smallint NOT NULL,
    last_modifier_id integer NOT NULL,
    refresh_token character varying NULL,
    refresh_token_end_date timestamp without time zone NULL,
    is_deleted boolean NULL DEFAULT (false),
    last_modifier character varying NULL,
    CONSTRAINT "PK_users" PRIMARY KEY (id)
);


CREATE TABLE ecommerce.product (
    id integer GENERATED BY DEFAULT AS IDENTITY,
    created_date timestamp without time zone NULL DEFAULT (CURRENT_TIMESTAMP),
    updated_date timestamp without time zone NULL,
    name text NULL,
    stock integer NOT NULL,
    price real NOT NULL,
    category_id integer NULL,
    is_deleted boolean NULL DEFAULT (false),
    last_modifier character varying NULL,
    CONSTRAINT "PK_product" PRIMARY KEY (id),
    CONSTRAINT "FK_product_category_category_id" FOREIGN KEY (category_id) REFERENCES ecommerce.category (id)
);


CREATE TABLE management.menu (
    id integer NOT NULL DEFAULT (nextval('management."Menu_id_seq"'::regclass)),
    created_date timestamp without time zone NULL DEFAULT (CURRENT_TIMESTAMP),
    updated_date timestamp without time zone NULL,
    name character varying(100) NOT NULL,
    description character varying NULL,
    url character varying NULL DEFAULT ('#'::character varying),
    parent_id integer NULL,
    icon_path character varying NULL,
    function_id integer NULL,
    is_deleted boolean NULL DEFAULT (false),
    last_modifier character varying NULL,
    CONSTRAINT "PK_menu" PRIMARY KEY (id),
    CONSTRAINT "FK_menu_functions_function_id" FOREIGN KEY (function_id) REFERENCES management.functions (id)
);


CREATE TABLE management.role_to_functions (
    id integer NOT NULL DEFAULT (nextval('management."RoleToFunctions_id_seq"'::regclass)),
    created_date timestamp without time zone NULL DEFAULT (CURRENT_TIMESTAMP),
    updated_date timestamp without time zone NULL,
    role_id integer NOT NULL,
    function_id integer NOT NULL,
    is_deleted boolean NULL DEFAULT (false),
    last_modifier character varying NULL,
    CONSTRAINT "PK_role_to_functions" PRIMARY KEY (id),
    CONSTRAINT "FK_role_to_functions_functions_function_id" FOREIGN KEY (function_id) REFERENCES management.functions (id) ON DELETE CASCADE,
    CONSTRAINT "FK_role_to_functions_roles_role_id" FOREIGN KEY (role_id) REFERENCES management.roles (id) ON DELETE CASCADE
);


CREATE TABLE management.user_to_funcitons (
    id integer NOT NULL DEFAULT (nextval('management."UserToFunciton_id_seq"'::regclass)),
    created_date timestamp without time zone NULL DEFAULT (CURRENT_TIMESTAMP),
    updated_date timestamp without time zone NULL,
    user_id integer NOT NULL,
    function_id integer NOT NULL,
    validity_period_start_time timestamp without time zone NULL,
    validity_period_end_time timestamp without time zone NULL,
    is_deleted boolean NULL DEFAULT (false),
    last_modifier character varying NULL,
    CONSTRAINT "PK_user_to_funcitons" PRIMARY KEY (id),
    CONSTRAINT "FK_user_to_funcitons_functions_function_id" FOREIGN KEY (function_id) REFERENCES management.functions (id) ON DELETE CASCADE,
    CONSTRAINT "FK_user_to_funcitons_users_user_id" FOREIGN KEY (user_id) REFERENCES management.users (id) ON DELETE CASCADE
);


CREATE TABLE management.user_to_roles (
    id integer NOT NULL DEFAULT (nextval('management."UserToRoles_id_seq"'::regclass)),
    created_date timestamp without time zone NULL DEFAULT (CURRENT_TIMESTAMP),
    updated_date timestamp without time zone NULL,
    user_id integer NOT NULL,
    role_id integer NOT NULL,
    validity_period_start_time timestamp without time zone NULL,
    validity_period_end_time timestamp without time zone NULL,
    is_deleted boolean NULL DEFAULT (false),
    last_modifier character varying NULL,
    CONSTRAINT "PK_user_to_roles" PRIMARY KEY (id),
    CONSTRAINT "FK_user_to_roles_roles_role_id" FOREIGN KEY (role_id) REFERENCES management.roles (id) ON DELETE CASCADE,
    CONSTRAINT "FK_user_to_roles_users_user_id" FOREIGN KEY (user_id) REFERENCES management.users (id) ON DELETE CASCADE
);


CREATE TABLE ecommerce.product_feature (
    product_id integer NOT NULL,
    color text NULL,
    height integer NULL,
    width integer NULL,
    CONSTRAINT product_feature_pkey PRIMARY KEY (product_id),
    CONSTRAINT "FK_product_feature_product_product_id" FOREIGN KEY (product_id) REFERENCES ecommerce.product (id) ON DELETE CASCADE
);


CREATE INDEX "IX_menu_function_id" ON management.menu (function_id);


CREATE INDEX "IX_product_category_id" ON ecommerce.product (category_id);


CREATE INDEX "IX_role_to_functions_function_id" ON management.role_to_functions (function_id);


CREATE INDEX "IX_role_to_functions_role_id" ON management.role_to_functions (role_id);


CREATE INDEX "IX_user_to_funcitons_function_id" ON management.user_to_funcitons (function_id);


CREATE INDEX "IX_user_to_funcitons_user_id" ON management.user_to_funcitons (user_id);


CREATE INDEX "IX_user_to_roles_role_id" ON management.user_to_roles (role_id);


CREATE INDEX "IX_user_to_roles_user_id" ON management.user_to_roles (user_id);


