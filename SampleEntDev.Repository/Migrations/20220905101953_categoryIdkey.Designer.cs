// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SampleEntDev.Repository;

#nullable disable

namespace SampleEntDev.Repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220905101953_categoryIdkey")]
    partial class categoryIdkey
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("functions_id_seq", "management")
                .HasMax(2147483647L);

            modelBuilder.HasSequence("UserToRoles_id_seq", "management")
                .HasMax(2147483647L);

            modelBuilder.Entity("SampleEntDev.Core.Entities.Schemas.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted")
                        .HasDefaultValueSql("false");

                    b.Property<string>("LastModifier")
                        .HasColumnType("character varying")
                        .HasColumnName("last_modifier");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Test")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.ToTable("category", "ecommerce");
                });

            modelBuilder.Entity("SampleEntDev.Core.Entities.Schemas.Functions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("action_name");

                    b.Property<string>("AreaName")
                        .HasColumnType("character varying")
                        .HasColumnName("area_name");

                    b.Property<string>("ControllerName")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("controller_name");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("FunctionName")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("function_name");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted")
                        .HasDefaultValueSql("false");

                    b.Property<string>("LastModifier")
                        .HasColumnType("character varying")
                        .HasColumnName("last_modifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.ToTable("functions", "management");
                });

            modelBuilder.Entity("SampleEntDev.Core.Entities.Schemas.Institution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('global.\"Institution_id_seq\"'::regclass)");

                    b.Property<string>("Address")
                        .HasColumnType("character varying")
                        .HasColumnName("address");

                    b.Property<int>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    b.Property<int?>("CountyId")
                        .HasColumnType("integer")
                        .HasColumnName("county_id");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted")
                        .HasDefaultValueSql("false");

                    b.Property<string>("LastModifier")
                        .HasColumnType("character varying")
                        .HasColumnName("last_modifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<int?>("NeighborhoodId")
                        .HasColumnType("integer")
                        .HasColumnName("neighborhood_id");

                    b.Property<string>("Phone")
                        .HasColumnType("character varying")
                        .HasColumnName("phone");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.ToTable("institution", "global");
                });

            modelBuilder.Entity("SampleEntDev.Core.Entities.Schemas.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('management.\"Menu_id_seq\"'::regclass)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<int?>("FunctionId")
                        .HasColumnType("integer")
                        .HasColumnName("function_id");

                    b.Property<string>("IconPath")
                        .HasColumnType("character varying")
                        .HasColumnName("icon_path");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted")
                        .HasDefaultValueSql("false");

                    b.Property<string>("LastModifier")
                        .HasColumnType("character varying")
                        .HasColumnName("last_modifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<string>("Url")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying")
                        .HasColumnName("url")
                        .HasDefaultValueSql("'#'::character varying");

                    b.HasKey("Id");

                    b.HasIndex("FunctionId");

                    b.ToTable("menu", "management");
                });

            modelBuilder.Entity("SampleEntDev.Core.Entities.Schemas.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted")
                        .HasDefaultValueSql("false");

                    b.Property<string>("LastModifier")
                        .HasColumnType("character varying")
                        .HasColumnName("last_modifier");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnName("price");

                    b.Property<int>("Stock")
                        .HasColumnType("integer")
                        .HasColumnName("stock");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("product", "ecommerce");
                });

            modelBuilder.Entity("SampleEntDev.Core.Entities.Schemas.ProductFeature", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<string>("Color")
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<int?>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<int?>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width");

                    b.HasKey("ProductId")
                        .HasName("product_feature_pkey");

                    b.ToTable("product_feature", "ecommerce");
                });

            modelBuilder.Entity("SampleEntDev.Core.Entities.Schemas.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('management.\"Roles_id_seq\"'::regclass)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted")
                        .HasDefaultValueSql("false");

                    b.Property<string>("LastModifier")
                        .HasColumnType("character varying")
                        .HasColumnName("last_modifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("role_name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.ToTable("roles", "management");
                });

            modelBuilder.Entity("SampleEntDev.Core.Entities.Schemas.RoleToFunctions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('management.\"RoleToFunctions_id_seq\"'::regclass)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("FunctionId")
                        .HasColumnType("integer")
                        .HasColumnName("function_id");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted")
                        .HasDefaultValueSql("false");

                    b.Property<string>("LastModifier")
                        .HasColumnType("character varying")
                        .HasColumnName("last_modifier");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.HasIndex("FunctionId");

                    b.HasIndex("RoleId");

                    b.ToTable("role_to_functions", "management");
                });

            modelBuilder.Entity("SampleEntDev.Core.Entities.Schemas.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Ad")
                        .HasColumnType("character varying")
                        .HasColumnName("ad");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted")
                        .HasDefaultValueSql("false");

                    b.Property<string>("LastModifier")
                        .HasColumnType("character varying")
                        .HasColumnName("last_modifier");

                    b.Property<string>("Soyad")
                        .HasColumnType("character varying")
                        .HasColumnName("soyad");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.ToTable("test", "ecommerce");
                });

            modelBuilder.Entity("SampleEntDev.Core.Entities.Schemas.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('management.\"User_id_seq\"'::regclass)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("e_mail");

                    b.Property<long?>("IdentityNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("identity_number");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted")
                        .HasDefaultValueSql("false");

                    b.Property<DateTime?>("LastLoginDatetime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_login_datetime");

                    b.Property<string>("LastModifier")
                        .HasColumnType("character varying")
                        .HasColumnName("last_modifier");

                    b.Property<int>("LastModifierId")
                        .HasColumnType("integer")
                        .HasColumnName("last_modifier_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("password");

                    b.Property<short>("RecordStatus")
                        .HasColumnType("smallint")
                        .HasColumnName("record_status");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("character varying")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime?>("RefreshTokenEndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("refresh_token_end_date");

                    b.Property<string>("Surename")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("surename");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id");

                    b.ToTable("users", "management");
                });

            modelBuilder.Entity("SampleEntDev.Core.Entities.Schemas.UserToFuncitons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('management.\"UserToFunciton_id_seq\"'::regclass)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("FunctionId")
                        .HasColumnType("integer")
                        .HasColumnName("function_id");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted")
                        .HasDefaultValueSql("false");

                    b.Property<string>("LastModifier")
                        .HasColumnType("character varying")
                        .HasColumnName("last_modifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<DateTime?>("ValidityPeriodEndTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("validity_period_end_time");

                    b.Property<DateTime?>("ValidityPeriodStartTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("validity_period_start_time");

                    b.HasKey("Id");

                    b.HasIndex("FunctionId");

                    b.HasIndex("UserId");

                    b.ToTable("user_to_funcitons", "management");
                });

            modelBuilder.Entity("SampleEntDev.Core.Entities.Schemas.UserToRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('management.\"UserToRoles_id_seq\"'::regclass)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted")
                        .HasDefaultValueSql("false");

                    b.Property<string>("LastModifier")
                        .HasColumnType("character varying")
                        .HasColumnName("last_modifier");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_date");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<DateTime?>("ValidityPeriodEndTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("validity_period_end_time");

                    b.Property<DateTime?>("ValidityPeriodStartTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("validity_period_start_time");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("user_to_roles", "management");
                });

            modelBuilder.Entity("SampleEntDev.Core.Entities.Schemas.Menu", b =>
                {
                    b.HasOne("SampleEntDev.Core.Entities.Schemas.Functions", "Function")
                        .WithMany("Menu")
                        .HasForeignKey("FunctionId");

                    b.Navigation("Function");
                });

            modelBuilder.Entity("SampleEntDev.Core.Entities.Schemas.Product", b =>
                {
                    b.HasOne("SampleEntDev.Core.Entities.Schemas.Category", "Category")
                        .WithMany("Product")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SampleEntDev.Core.Entities.Schemas.ProductFeature", b =>
                {
                    b.HasOne("SampleEntDev.Core.Entities.Schemas.Product", "Product")
                        .WithOne("ProductFeature")
                        .HasForeignKey("SampleEntDev.Core.Entities.Schemas.ProductFeature", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SampleEntDev.Core.Entities.Schemas.RoleToFunctions", b =>
                {
                    b.HasOne("SampleEntDev.Core.Entities.Schemas.Functions", "Function")
                        .WithMany("RoleToFunctions")
                        .HasForeignKey("FunctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SampleEntDev.Core.Entities.Schemas.Roles", "Role")
                        .WithMany("RoleToFunctions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Function");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SampleEntDev.Core.Entities.Schemas.UserToFuncitons", b =>
                {
                    b.HasOne("SampleEntDev.Core.Entities.Schemas.Functions", "Function")
                        .WithMany("UserToFuncitons")
                        .HasForeignKey("FunctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SampleEntDev.Core.Entities.Schemas.Users", "User")
                        .WithMany("UserToFuncitons")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Function");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SampleEntDev.Core.Entities.Schemas.UserToRoles", b =>
                {
                    b.HasOne("SampleEntDev.Core.Entities.Schemas.Roles", "Role")
                        .WithMany("UserToRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SampleEntDev.Core.Entities.Schemas.Users", "User")
                        .WithMany("UserToRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SampleEntDev.Core.Entities.Schemas.Category", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("SampleEntDev.Core.Entities.Schemas.Functions", b =>
                {
                    b.Navigation("Menu");

                    b.Navigation("RoleToFunctions");

                    b.Navigation("UserToFuncitons");
                });

            modelBuilder.Entity("SampleEntDev.Core.Entities.Schemas.Product", b =>
                {
                    b.Navigation("ProductFeature")
                        .IsRequired();
                });

            modelBuilder.Entity("SampleEntDev.Core.Entities.Schemas.Roles", b =>
                {
                    b.Navigation("RoleToFunctions");

                    b.Navigation("UserToRoles");
                });

            modelBuilder.Entity("SampleEntDev.Core.Entities.Schemas.Users", b =>
                {
                    b.Navigation("UserToFuncitons");

                    b.Navigation("UserToRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
